pipeline {
    agent any
    environment
    {
        PATH = "/E/Maven/apache-maven-3.9.6/bin:$PATH"
        def sonarHome = tool 'jenkins-sonar-scanner-tool'
        def registry = 'https://nithyawipro.jfrog.io'
    }
    stages {
        stage('Welcome') {
            steps {
                powershell 'ECHO WELCOME MASTER BRANCH'
            }
        }
        stage('Build') {
            steps {
                //powershell 'mvn -B -DskipTests clean package'
                powershell 'mvn clean deploy'
                sleep(20)
            }
        }
        stage('Test') {
            steps {
                // job to job
                //build job: 'boolParameter', parameters: [[$class: 'BooleanParameterValue', name: 'bool', value: true]]
                sleep(5)
                powershell 'mvn test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }
        stage('SonarQube-Analysis')
        {
            steps
            {
                echo "SQ Analysis"
                withSonarQubeEnv('sonarqube-server')
                {
                    echo "SQ Analysis inside server"
                    powershell "${sonarHome}/bin/sonar-scanner -Verbose"
                    echo "End"
                }
            }
        }
        stage('JFrog Integration')
        {
            steps
            {
                echo "#####################JFrog Artifact Upload######################"
                
                script
                {
                    def server = Artifactory.newServer url:registry+"/artifactory" , credentialsId:"jfrogInteg"
                    def properties = "buildid=${env.BUILD_ID},commitid=${GIT_COMMIT}";
                    def uploadSpec = """{
                    "files": [
                    {
                    "pattern": "jarstaging/(*)",
                    "target": "ngk-libs-release-local/{1}",
                    "flat": "false",
                    "props": "${properties}",
                    "exclusiions": ["*.sha1", "*.md5"]
                    }
                    ]
                    }"""
                    def buildInfo = server.upload(uploadSpec)
                    buildInfo.env.collect()
                    server.publishBuildInfo(buildInfo)
                }
            }
        }
        stage('Deliver') {
            steps {
                powershell './jenkins/scripts/deliver.sh'
            }
        }
    }
}
